function fadeIn_est = PriceFadeIn(eta, sigma, K)

% Base case max simulations
base = 5000;     
min_fraction = 0.1; 

% calls: sims must increase in K and sigma
% puts: sims must decrease in K and increase in sigma
k_factor = (120 - K) / (120 - 80);
sigma_factor = (sigma - 0.1) / (0.3 - 0.1);

if eta == -1
    eta_factor = 0.35;
    k_factor=1-k_factor ;
else
    eta_factor = 1.0;
end

% Combine linearly
weight=0.2;
combo_factor = weight * k_factor + (1-weight) * sigma_factor;

% Scale combo factor to be between [min_fraction, 1]
scaled_factor = min_fraction + (1 - min_fraction) * combo_factor;

% Final nSims, rounded up to nearest d
d=300;
nSims = ceil((base * eta_factor * scaled_factor) / d) * d;

% Parameters
s0 = 100;
L = 70;
U = 130;
r = 0.1;
T = 1;
N = 25;
h = T / (N + 1);

mu_opt = 0.7*T*eta;
w=@(x) normpdf(x,0,sqrt(T));
v=@(x) normpdf(x,mu_opt,sqrt(T));

% Payoff function for fade-in
payoff_fade = @(sT, paths_fixed,w,v) w ./ v .*exp(-r*T) .* max(eta * (sT - K), 0) .* mean((paths_fixed > L) .* (paths_fixed < U), 1);


%----------------Antithetic + End point stratification + 'importance'-------------------

i_imp=1:d;
t=0:h:T;
ni=nSims/d;
u=rand(ni,d);

bigZ=randn(nSims,N);
negbigZ=-bigZ;
u_vec=(i_imp-1)/d+u/d;
  

%ni x d matrix
stratified_Z=norminv(u_vec);
%ni x d matrix (adjustment made for more mass applied to non zero payoff areas) 
terminal_weiners=stratified_Z*sqrt(T)+mu_opt;
%n x 1 matrix
terminal_weiners=reshape(terminal_weiners,nSims,1);

%N+2 x n matrix
w_paths_1=[zeros(nSims,1),BB(t,0,terminal_weiners,bigZ),terminal_weiners]';
w_paths_2=[zeros(nSims,1),BB(t,0,terminal_weiners,negbigZ),terminal_weiners]';

%N+2 x n matrix
paths_1=s0*exp((r-0.5*sigma^2)*t'+sigma*w_paths_1);
paths_2=s0*exp((r-0.5*sigma^2)*t'+sigma*w_paths_2);

sT_1 = paths_1(end, :);
sT_2 = paths_2(end, :);
paths_fixed_1 = paths_1(2:end-1, :);
paths_fixed_2 = paths_2(2:end-1, :);

% anti payoffs
terminal_weiners=reshape(terminal_weiners,1,nSims);
w_vals=w(terminal_weiners);
v_vals=v(terminal_weiners);
fade_anti_1 = payoff_fade(sT_1, paths_fixed_1,w_vals,v_vals) ;
fade_anti_2 = payoff_fade(sT_2, paths_fixed_2,w_vals,v_vals) ;

% Final estimate with 3 var reduction techniques
fade_final = (fade_anti_1 + fade_anti_2) / 2;
fadeIn_est = mean(fade_final);

end


function paths = BB(t, W0, WN, Z)
t0 = t(1);
tN = t(end);
% 1 x N
t_interior = t(2:end-1);  
% n x N (back casting)
muBB = W0 + ((t_interior - t0) / (tN - t0)) .* (WN - W0);      
% 1 x N
sigmaBB = sqrt((t_interior - t0) .* (tN - t_interior) / (tN - t0)); 
% n x N
paths = muBB + Z .* sigmaBB;   
end
